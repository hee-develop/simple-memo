{"version":3,"sources":["styles/add_modal.module.scss","styles/button.module.scss","styles/memo.module.scss","styles/components/index/memo_list.module.scss","components/Button.tsx","components/AddModal.tsx","components/Memo.tsx","components/index/MemoList.tsx","functions/modifyArray.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","text","description","accent","onClicked","buttonClass","styles","buttonAccent","button","className","onClick","title","AddModal","isVisible","onCanceled","onConfirmed","useState","value","setValue","confirm","useCallback","ev","stopPropagation","length","cancel","backgroundClicked","onKeyDownedCallback","key","visibilityStyle","useMemo","display","style","addModalBackground","addModal","addModalInput","onChange","target","onKeyDown","type","placeholder","buttonLayout","Memo","content","contentState","onDoubleClicked","memoClass","stateClass","memoAsap","memo","onClickCallback","onDoubleClickCallback","onDoubleClick","MemoList","memos","setMemos","memoList","map","idx","state","prev","arr","replace","targetIndex","indexOf","beforeTargetArr","slice","afterTargetArr","replaceTargetFromArray","changeState","filter","_","index","removeTargetFromArray","App","isAddModalVisible","setIsAddModalVisible","str","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0c70f2b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addModalBackground\":\"add_modal_addModalBackground__q5myg\",\"addModal\":\"add_modal_addModal__2FBv6\",\"addModalInput\":\"add_modal_addModalInput__L_Y28\",\"buttonLayout\":\"add_modal_buttonLayout__127Lk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__3sdyg\",\"buttonAccent\":\"button_buttonAccent__3BmHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"memo\":\"memo_memo__2KCFc\",\"memoAsap\":\"memo_memoAsap__ljA4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"memoList\":\"memo_list_memoList__PyhC7\"};","import * as React from 'react';\n\nimport styles from '../styles/button.module.scss';\n\ntype Props = {\n  text: string;\n  description?: string;\n  accent?: boolean;\n  onClicked?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nexport default function Button({\n  text,\n  description,\n  accent,\n  onClicked\n}: Props) {\n  const buttonClass = accent ? styles.buttonAccent : styles.button;\n\n  return (\n    <button\n      className={buttonClass}\n      onClick={onClicked}\n      title={description}\n    >\n      {text}\n    </button>\n  );\n}\n","import * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport styles from '../styles/add_modal.module.scss';\nimport Button from './Button';\n\ntype Props = {\n  isVisible: boolean,\n  onConfirmed: (content: string) => void,\n  onCanceled: () => void,\n}\n\nexport default function AddModal({\n  isVisible,\n  onCanceled,\n  onConfirmed,\n}: Props) {\n  const [value, setValue] = useState('');\n\n  const confirm = useCallback((ev) => {\n    ev.stopPropagation();\n    if (value.length < 1) return;\n\n    onConfirmed(value);\n    setValue('');\n  }, [value, onConfirmed]);\n\n  const cancel = useCallback((ev) => {\n    ev.stopPropagation();\n\n    onCanceled();\n    setValue('');\n  }, [onCanceled]);\n\n  const backgroundClicked = useCallback((ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    ev.stopPropagation();\n    cancel(ev);\n  }, [cancel]);\n\n  const onKeyDownedCallback: React.KeyboardEventHandler<HTMLInputElement> = useCallback((ev) => {\n    switch (ev.key) {\n      case 'Enter':\n        confirm(ev);\n        break;\n      case 'Esc':\n      case 'Escape':\n        cancel(ev);\n        break;\n    }\n  }, [cancel, confirm]);\n\n  const visibilityStyle: React.CSSProperties =  useMemo(() => ({display: isVisible ? 'initial' : 'none'}), [isVisible]);\n\n  return (\n    <div style={visibilityStyle}>\n      <div\n        className={styles.addModalBackground}\n        onClick={backgroundClicked}\n      />\n\n      <div className={styles.addModal}>\n        <input\n          className={styles.addModalInput}\n          value={value}\n          onChange={({target}) => setValue(target.value)}\n          onKeyDown={onKeyDownedCallback}\n          type=\"text\"\n          placeholder=\"add something..\"\n        />\n        <div\n          className={styles.buttonLayout}\n        >\n          <Button\n            text=\"○\"\n            description=\"add this memo\"\n            accent={true}\n            onClicked={confirm}\n          />\n          <Button\n            text=\"⛌\"\n            description=\"discard this memo\"\n            onClicked={cancel}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport styles from '../styles/memo.module.scss';\nimport { ContentStateType } from '../types/ContentStateType';\n\ntype Props = {\n  content: string,\n  contentState: ContentStateType\n  onClicked: () => void,\n  onDoubleClicked: () => void,\n}\n\nexport default function Memo({\n  content,\n  contentState,\n  onClicked,\n  onDoubleClicked,\n}: Props) {\n  const memoClass = useMemo(() => {\n    let stateClass = '';\n    if (contentState === 'asap') {\n      stateClass = styles.memoAsap;\n    }\n\n    return `${styles.memo} ${stateClass}`;\n  }, [contentState]);\n\n  const onClickCallback = useCallback((ev: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n    ev.stopPropagation();\n    onClicked();\n  }, [onClicked]);\n  const onDoubleClickCallback = useCallback((ev: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n    ev.stopPropagation();\n    onDoubleClicked();\n  }, [onDoubleClicked]);\n\n  return (\n    <span\n      className={memoClass}\n      onClick={onClickCallback}\n      onDoubleClick={onDoubleClickCallback}\n    >\n      {content}\n    </span>\n  );\n}\n","import React from 'react';\nimport Memo from '../Memo';\n\nimport { removeTargetFromArray, replaceTargetFromArray } from '../../functions/modifyArray';\nimport { MemoType } from '../../types/MemoType';\n\nimport styles from '../../styles/components/index/memo_list.module.scss';\n\ntype Props = {\n  memos: MemoType[];\n  setMemos: React.Dispatch<React.SetStateAction<MemoType[]>>;\n}\n\nconst changeState = (memo: MemoType): MemoType => {\n  switch (memo.state) {\n    case 'normal':\n      return {...memo, state: 'asap'};\n    case 'asap':\n      return {...memo, state: 'normal'};\n  }\n};\n\nexport default function MemoList({memos, setMemos}: Props) {\n  return (\n    <div className={styles.memoList}>\n      {memos.map((memo, idx) => (\n        <Memo\n          key={`${idx}-${memo}`}\n          content={memo.content}\n          contentState={memo.state}\n          onClicked={() => {\n            setMemos(prev => replaceTargetFromArray(prev, idx, changeState(memo)))\n          }}\n          onDoubleClicked={() => {\n            setMemos(prev => removeTargetFromArray(prev, idx))\n          }}\n        />\n      ))}\n    </div>\n  )\n}\n","export function removeTargetFromArray<T extends unknown>(arr: T[], target: T): T[];\nexport function removeTargetFromArray<T extends unknown>(arr: T[], targetIndex: number): T[];\n\nexport function removeTargetFromArray<T extends unknown>(arr: T[], target: T | number) {\n  const targetIndex = typeof target === 'number' ? target : arr.indexOf(target);\n\n  return arr.filter((_, index) => index !== targetIndex);\n}\n\nexport function replaceTargetFromArray<T extends unknown>(arr: T[], target: T, replace: T): T[];\nexport function replaceTargetFromArray<T extends unknown>(arr: T[], targetIndex: number, replace: T): T[];\n\nexport function replaceTargetFromArray<T extends unknown>(arr: T[], target: T | number, replace: T) {\n  const targetIndex = typeof target === 'number' ? target : arr.indexOf(target);\n\n  const beforeTargetArr = arr.slice(0, targetIndex);\n  const afterTargetArr = arr.slice(targetIndex + 1);\n\n  if (targetIndex < 1) {\n    return [replace, ...afterTargetArr];\n  } else {\n    return [...beforeTargetArr, replace, ...afterTargetArr];\n  }\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport AddModal from './components/AddModal';\nimport MemoList from './components/index/MemoList';\nimport { MemoType } from './types/MemoType';\n\nfunction App() {\n  const [isAddModalVisible, setIsAddModalVisible] = useState(false);\n\n  const [memos, setMemos] = useState<MemoType[]>([\n    { content: 'buy new Macbook', state: 'normal' },\n    { content: 'make simple memo', state: 'asap' },\n    { content: 'learn react', state: 'normal' },\n  ]);\n  const title = 'Simple memo';\n\n  return (\n    <div className=\"App\" onClick={() => setIsAddModalVisible(true)}>\n      <h1>{title}</h1>\n\n      <MemoList\n        memos={memos}\n        setMemos={setMemos}\n      />\n\n      <AddModal\n        isVisible={isAddModalVisible}\n        onConfirmed={(str) => setMemos(prev => [...prev, {content: str, state: 'normal'}])}\n        onCanceled={() => setIsAddModalVisible(false)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}